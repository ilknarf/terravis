{"version":3,"sources":["utils/hash.js","utils/diamondSquare.js","components/GridRender.js","components/GridView.js","App.js","serviceWorker.js","index.js"],"names":["hash","str","i","length","charCodeAt","Math","abs","diamondSquare","seed","side","grid","push","Array","fill","map","_","arbitraryString","s1","s2","s3","s4","currLength","randInc","random","diamond","xInc","yInc","sum","x","y","reduce","prev","curr","square","stagger","GridRender","props","mesh","useRef","ref","useUpdate","geometry","v","vertices","j","z","computeVertexNormals","verticesNeedUpdate","Fragment","attach","args","sideLength","position","color","wireframe","GridView","useState","setSeed","gridBase","ds","React","setGrid","Grid","Box","Container","style","height","Input","type","placeholder","onChange","e","target","value","Button","onClick","camera","App","className","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c683ab99.chunk.js","sourcesContent":["// https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\nfunction hash(str) {\n  let hash = 0, i, chr;\n  for (i = 0; i < str.length; i++) {\n    chr   = str.charCodeAt(i);\n    hash  = ((hash << 5) - hash) + chr;\n    // hash |= 0; // Convert to 32bit integer\n  }\n  return Math.abs(hash);\n}\n\nexport default hash;","import hash from './hash';\n\nfunction diamondSquare(seed, side) {\n  // algorithm starts with 2^n + 1 array\n  let grid = []\n  for (let i = 0; i < side; i++) {\n    grid.push(Array(side).fill(0));\n  }\n\n  // \"length\" is more like the final index, more like the # of edges\n  let length = grid.length - 1;\n\n  // initialize four corner seeds\n  function arbitraryString(i) {\n    let arb = ['awfewaf', 'AWEFG@$g', '@##EFAa', '###ERR'];\n    return arb[i];\n  }\n  let [s1, s2, s3, s4] = Array(4)\n    .fill(0)\n    .map((_, i) => (hash(seed + arbitraryString(i)) % 100) - 40);\n\n  grid[0][0] = s1;\n  grid[length][0] = s2;\n  grid[0][length] = s3;\n  grid[length][length] = s4;\n\n  let currLength = length;\n\n  function randInc() {\n    return (Math.random() * currLength * 10) / length;\n  }\n\n  function diamond() {\n    for (let xInc = 0; xInc < length; xInc += currLength) {\n      for (let yInc = 0; yInc < length; yInc += currLength) {\n        let sum = [\n          [xInc, yInc],\n          [xInc + currLength, yInc],\n          [xInc, yInc + currLength],\n          [xInc + currLength, yInc + currLength],\n        ]\n          .map(([x, y]) => grid[x][y])\n          .reduce((prev, curr) => prev + curr);\n\n        grid[xInc + currLength / 2][yInc + currLength / 2] = sum / 4 + randInc(); // TODO add random number\n      }\n    }\n  }\n\n  // need to skip staggers every other row...\n  function square() {\n    let stagger = currLength / 2;\n    for (let xInc = 0; xInc <= length; xInc += stagger) {\n      for (let yInc = (stagger + xInc) % currLength; yInc <= length; yInc += currLength) {\n        let sum = [\n          [xInc, yInc + stagger],\n          [xInc + stagger, yInc],\n          [xInc, yInc - stagger],\n          [xInc - stagger, yInc],\n        ]\n          .map(([x, y]) => {\n            if (x < 0) {\n              x += length;\n            }\n            if (x > length) {\n              x -= length;\n            }\n            if (y < 0) {\n              y += length;\n            }\n            if (y > length) {\n              y -= length;\n            }\n            return grid[x][y];\n          })\n          .reduce((prev, curr) => prev + curr);\n\n        grid[xInc][yInc] = sum / 4 + randInc();\n      }\n    }\n  }\n\n  for (; currLength !== 1; currLength /= 2) {\n    diamond();\n    square();\n  }\n\n  return grid;\n}\n\nexport default diamondSquare;","import React, { useRef, useState } from 'react';\nimport { useUpdate } from 'react-three-fiber';\nimport { OrbitControls, MapControls } from 'drei';\n\n// THREE.js\nfunction GridRender(props) {\n  const mesh = useRef();\n\n  const ref = useUpdate((geometry) => {\n    let v = geometry.vertices;\n\n    let side = props.grid.length;\n    for (let i = 0; i < side; i++) {\n      for (let j = 0; j < side; j++) {\n        v[i * side + j].z = props.grid[i][j];\n      }\n    }\n\n    geometry.computeVertexNormals();\n\n    geometry.verticesNeedUpdate = true;\n  }, [props.grid]);\n\n\n  return (\n    <React.Fragment>\n      <mesh ref={mesh}>\n        <planeGeometry ref={ref} attach={'geometry'} args={[100, 100, props.sideLength, props.sideLength]} position={[0, 0]} />\n        <meshPhongMaterial attach={'material'} color={'blue'} wireframe={true} />\n      </mesh>\n      <OrbitControls />\n    </React.Fragment>\n  )\n}\n\nexport default GridRender;","import React, {useState} from 'react';\nimport ds from '../utils/diamondSquare';\nimport GridRender from './GridRender';\nimport { Canvas } from 'react-three-fiber';\nimport { Box, Container, Button, Input } from '@material-ui/core';\n\nconst side = 33;\n\nfunction GridView(props) {\n  let [seed, setSeed] = useState('enter seed here')\n  let gridBase = ds(seed, side);\n  let [grid, setGrid] = React.useState(gridBase);\n  const Grid = <GridRender sideLength={side - 1} grid={grid} />\n\n  return (\n    <Box>\n      <Container style={{height: '80vh'}}>\n        <Input type={'text'} placeholder={seed} onChange={(e) => setSeed(e.target.value)} />\n        <Button type=\"button\" onClick={() => setGrid(ds(seed, side))}>Grid me!</Button>\n        <Canvas\n          camera={{position: [0, -80, 40]}}\n        >\n          <ambientLight />\n          <pointLight position={[10, 10, 50]} />\n          {Grid}\n        </Canvas>\n      </Container>\n    </Box>\n  )\n}\n\nexport default GridView;","import React from 'react';\nimport GridView from './components/GridView';\nimport { CssBaseline } from '@material-ui/core';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <GridView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}